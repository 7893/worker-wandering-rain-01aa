{
  "version": 3,
  "sources": ["../lib/color-utils.ts", "../lib/trace-utils.ts", "../lib/rate-limit.ts", "../lib/db-utils.ts", "../src/template.ts", "../src/index.ts"],
  "sourceRoot": ".cfbundle",
  "sourcesContent": ["export function generateRandomColorHex(): string {\n    const h = Math.floor(Math.random() * 360);\n    const s = Math.floor(Math.random() * 20 + 70);\n    const l = Math.floor(Math.random() * 20 + 40);\n    const h1 = h / 360, s1 = s / 100, l1 = l / 100;\n    let r: number, g: number, b: number;\n    if (s1 === 0) {\n        r = g = b = l1;\n    } else {\n        const hue2rgb = (p: number, q: number, t: number) => {\n            if (t < 0) t += 1;\n            if (t > 1) t -= 1;\n            if (t < 1 / 6) return p + (q - p) * 6 * t;\n            if (t < 1 / 2) return q;\n            if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n            return p;\n        };\n        const q = l1 < 0.5 ? l1 * (1 + s1) : l1 + s1 - l1 * s1;\n        const p = 2 * l1 - q;\n        r = hue2rgb(p, q, h1 + 1 / 3);\n        g = hue2rgb(p, q, h1);\n        b = hue2rgb(p, q, h1 - 1 / 3);\n    }\n    const toHex = (x: number) => {\n        const h = Math.round(x * 255).toString(16);\n        return h.length === 1 ? \"0\" + h : h;\n    };\n    return `#${toHex(r)}${toHex(g)}${toHex(b)}`;\n}\n\n// Redundant generateTraceId function has been removed.", "// lib/trace-utils.ts\n\nexport function generateTraceId(): string {\n    const timestamp = Date.now(); // \u6BEB\u79D2\u7EA7\u65F6\u95F4\u6233\n    const randomPart = Math.random().toString(36).substring(2, 6); // \u751F\u62104\u4F4D\u968F\u673A\u5B57\u7B26\u4E32\n    return `trace-${timestamp}-${randomPart}`;\n}\n", "export class RateLimiter {\n    private limit: number;\n    private counter: number;\n    private lastTimestamp: number;\n\n    constructor(limit: number) {\n        this.limit = limit;\n        this.counter = 0;\n        this.lastTimestamp = Date.now();\n    }\n\n    canProceed(): boolean {\n        const now = Date.now();\n        if (now - this.lastTimestamp > 1000) {\n            this.counter = 0;\n            this.lastTimestamp = now;\n        }\n        if (this.counter < this.limit) {\n            this.counter++;\n            return true;\n        }\n        return false;\n    }\n}\n", "// lib/db-utils.ts (AutoREST \u7248\u672C)\n\nexport interface Env {\n    ORDS_BASE_URL: string;\n    ORDS_SCHEMA_PATH: string;\n    ORDS_API_PATH: string;\n    DB_USER: string;\n    DB_PASSWORD: string;\n}\n\nexport interface ColorRecordForAutoRest {\n    color: string;\n    trace_id: string;\n    source: string;\n    event_at?: string;\n    client_ip?: string;\n    user_agent?: string;\n    referer?: string | null;\n    cf_country?: string | null;\n    cf_colo?: string | null;\n    cf_asn?: number | null;\n    cf_http_protocol?: string | null;\n    cf_tls_cipher?: string | null;\n    cf_tls_version?: string | null;\n    cf_threat_score?: number | null;\n    cf_trust_score?: number | null;\n    extra?: string | null;\n}\n\nexport async function insertColorRecord(colorData: Partial<ColorRecordForAutoRest>, env: Env): Promise<void> {\n    const baseUrl = env.ORDS_BASE_URL ? env.ORDS_BASE_URL.replace(/\\/$/, '') : '';\n    const schemaPath = env.ORDS_SCHEMA_PATH ? env.ORDS_SCHEMA_PATH.replace(/^\\/|\\/$/g, '') : '';\n    const tableAliasPath = env.ORDS_API_PATH ? env.ORDS_API_PATH.replace(/^\\/|\\/$/g, '') : '';\n\n    const apiUrl = `${baseUrl}/${schemaPath}/${tableAliasPath}/`;\n\n    if (!baseUrl || !schemaPath || !tableAliasPath || !apiUrl.startsWith(\"https://\")) {\n        console.error(\n            \"Failed to construct a valid ORDS AutoREST API URL from environment variables.\",\n            { baseUrl, schemaPath, tableAliasPath, constructedUrl: apiUrl }\n        );\n        throw new Error(\"Invalid ORDS AutoREST API URL configuration.\");\n    }\n\n    const requestBody = JSON.stringify(colorData);\n\n    const credentials = `${env.DB_USER}:${env.DB_PASSWORD}`;\n    const basicAuthHeader = `Basic ${btoa(credentials)}`;\n\n    console.log(`Sending POST to AutoREST: ${apiUrl} for trace_id: ${colorData.trace_id}`);\n\n    // Simple retry with exponential backoff for transient failures\n    const maxAttempts = 3;\n    let attempt = 0;\n    let response: Response | null = null;\n    let lastError: any = null;\n    const baseTimeoutMs = 8000; // per-attempt network timeout\n\n    while (attempt < maxAttempts) {\n        attempt++;\n        try {\n            // Per-attempt timeout controller (fallback if AbortSignal.timeout is not available)\n            const controller = new AbortController();\n            const timeout = setTimeout(() => {\n                try { controller.abort(); } catch {}\n            }, Math.min(baseTimeoutMs * attempt, 20000));\n\n            response = await fetch(apiUrl, {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json',\n                    'Authorization': basicAuthHeader\n                },\n                body: requestBody,\n                signal: controller.signal as any\n            });\n            clearTimeout(timeout);\n\n            // Retry on 5xx; break on success or 4xx\n            if (response.ok || (response.status >= 400 && response.status < 500)) {\n                break;\n            }\n        } catch (fetchError: any) {\n            lastError = fetchError;\n            console.error(`AutoREST network error (attempt ${attempt}/${maxAttempts}) trace=${colorData.trace_id}: ${fetchError?.message}`);\n        }\n\n        if (attempt < maxAttempts) {\n            const delayMs = Math.min(1000 * 2 ** (attempt - 1), 4000) + Math.floor(Math.random() * 200);\n            await new Promise((r) => setTimeout(r, delayMs));\n        }\n    }\n\n    if (!response || !response.ok) {\n        const status = response ? response.status : 0;\n        const statusText = response ? response.statusText : 'no response';\n        let errorBodyText = '[Could not retrieve error body text]';\n        try {\n            errorBodyText = response ? await response.text() : String(lastError || 'no response');\n        } catch (e) {\n            console.warn(`Could not get text from error response body for trace ${colorData.trace_id}`, e);\n        }\n        console.error(\n            `Failed to insert via AutoREST. Status: ${status} ${statusText}. Trace: ${colorData.trace_id}, URL: ${apiUrl}`,\n            { requestBodySent: requestBody, responseBodyText: errorBodyText }\n        );\n        throw new Error(`Failed to insert via AutoREST: ${status} ${statusText}. Response: ${errorBodyText}`);\n    } else {\n        console.log(`AutoREST POST success for trace_id: ${colorData.trace_id}. Status: ${response.status}`);\n        // const responseData = await response.json();\n        // console.log(\"AutoREST response data:\", responseData);\n    }\n}\n", "// Autogenerated from src/template.html to avoid bundler loader for .html\n// Export as a string to ensure Wrangler/esbuild bundles without extra config.\n\nconst pageTemplate = `<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>__COLOR_HEX__</title>\n  <style>\n    body {\n      margin: 0;\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n      /* \u4E3B\u8F74\uFF08\u5782\u76F4\uFF09\u5C45\u4E2D */\n      align-items: center;\n      /* \u4EA4\u53C9\u8F74\uFF08\u6C34\u5E73\uFF09\u5C45\u4E2D */\n      min-height: 100vh;\n      /* \u786E\u4FDD body \u81F3\u5C11\u5360\u6EE1\u6574\u4E2A\u89C6\u53E3\u9AD8\u5EA6 */\n      background-color: __COLOR_HEX__;\n      transition: background-color 0.8s;\n      font-family: sans-serif;\n      cursor: pointer;\n      text-align: center;\n      /* \u8BA9\u5185\u90E8\u6587\u672C\u4E5F\u9ED8\u8BA4\u5C45\u4E2D */\n      /* --- ADD CSS START --- */\n      gap: 0.5em;\n      /* \u66FF\u4EE3 time-display \u7684 margin\uFF0C\u63D0\u4F9B\u95F4\u9699 */\n      /* --- ADD CSS END --- */\n    }\n\n    .time-display {\n      font-size: clamp(1.5rem, 4vw, 2rem);\n      /* \u54CD\u5E94\u5F0F\u5B57\u4F53\u5927\u5C0F */\n      color: white;\n      text-shadow: 1px 1px 2px rgba(0, 0, 0, 0.5);\n      /* --- MODIFY CSS START --- */\n      margin: 0;\n      /* \u79FB\u9664\u4E0A\u4E0B margin */\n      padding: 0.1em 0;\n      /* \u53EF\u4EE5\u52A0\u4E00\u70B9\u5FAE\u5C0F\u7684\u4E0A\u4E0B padding \u6539\u5584\u89C2\u611F */\n      /* width: auto; */\n      /* \u5BBD\u5EA6\u81EA\u52A8\uFF0C\u7531 flex \u5BB9\u5668\u5904\u7406\u5C45\u4E2D */\n      line-height: 1.2;\n      /* \u53EF\u4EE5\u5FAE\u8C03\u884C\u9AD8 */\n      /* --- MODIFY CSS END --- */\n    }\n\n    /* Favicon link stays the same (square) */\n  </style>\n  <link id=\"favicon\" rel=\"icon\"\n    href=\"data:image/svg+xml,<svg xmlns=%22http://www.w3.org/2000/svg%22 viewBox=%220 0 100 100%22><rect width=%22100%22 height=%22100%22 fill=%22__COLOR_HEX_URL_ENCODED__%22/></svg>\">\n</head>\n\n<body>\n  <div id=\"time-utc\" class=\"time-display\">Loading UTC+0\u2026</div>\n  <div id=\"time-utc8\" class=\"time-display\">Loading UTC+8\u2026</div>\n\n  <script nonce=\"__CSP_NONCE__\">\n    // JavaScript \u90E8\u5206\u4FDD\u6301\u4E0D\u53D8...\n    // const initialTraceId = \"__TRACE_ID__\"; // Currently unused on client side\n    const initialServerColor = \"__INITIAL_COLOR_HEX__\";\n\n    function hslToHex(h, s, l) { l /= 100; const a = s * Math.min(l, 1 - l) / 100; const f = n => { const k = (n + h / 30) % 12; const color = l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1); return Math.round(255 * color).toString(16).padStart(2, '0'); }; return '#' + f(0) + f(8) + f(4); }\n\n    async function sendColorChange(hexColor, sourceType) { const eventTraceId = crypto.randomUUID(); try { const response = await fetch('/', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ color: hexColor, trace_id: eventTraceId, source: sourceType }) }); if (!response.ok) { console.error('Failed to send color change:', response.status, await response.text()); } } catch (e) { console.error('Error sending color change:', e); } }\n\n    function updateTimeDisplays() { const now = new Date(); const utcTimeStr = now.toISOString().substring(0, 19).replace('T', ' '); const utc8Time = new Date(now.getTime() + 8 * 60 * 60 * 1000); const utc8TimeStr = utc8Time.toISOString().substring(0, 19).replace('T', ' '); document.getElementById('time-utc').textContent = utcTimeStr + ' UTC+0'; document.getElementById('time-utc8').textContent = utc8TimeStr + ' UTC+8'; }\n\n    function generateRandomHslComponents() { const h = Math.floor(Math.random() * 360); const s = Math.floor(Math.random() * 20 + 70); const l = Math.floor(Math.random() * 20 + 40); return { h, s, l }; }\n\n    function applyColor(hexColor) { document.body.style.backgroundColor = hexColor; const svgFavicon = 'data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 100 100\"><rect width=\"100\" height=\"100\" fill=\"' + hexColor.replace('#', '%23') + '\"/></svg>'; document.getElementById('favicon').setAttribute('href', svgFavicon); }\n\n    updateTimeDisplays(); setInterval(updateTimeDisplays, 1000);\n\n    function changeColor(sourceType) { const { h, s, l } = generateRandomHslComponents(); const newHexColor = hslToHex(h, s, l); applyColor(newHexColor); sendColorChange(newHexColor, sourceType); }\n\n    setInterval(() => { if (new Date().getSeconds() % 5 === 0) { changeColor('a'); } }, 1000);\n\n    document.body.addEventListener('click', () => { changeColor('c'); });\n\n    setTimeout(() => { sendColorChange(initialServerColor, 'i'); document.title = initialServerColor; }, 100);\n  </script>\n</body>\n\n</html>`;\n\nexport default pageTemplate;\n", "// src/index.ts (AutoREST \u9002\u914D\u7248\uFF0Cscheduled \u51FD\u6570\u6A21\u62DF\u7528\u6237\u8BBF\u95EE\uFF0C\u4FEE\u6B63 source \u548C event_at)\n\nimport { generateRandomColorHex } from '../lib/color-utils';\nimport { generateTraceId } from '../lib/trace-utils';\nimport { RateLimiter } from '../lib/rate-limit';\nimport { insertColorRecord, Env as DbEnv, ColorRecordForAutoRest } from '../lib/db-utils';\nimport pageTemplate from './template';\n\nfunction securityHeaders(extra?: Record<string, string>): HeadersInit {\n    const base: Record<string, string> = {\n        'X-Content-Type-Options': 'nosniff',\n        'Referrer-Policy': 'no-referrer',\n        'X-Frame-Options': 'DENY',\n        'Cross-Origin-Resource-Policy': 'same-origin',\n        'Cross-Origin-Opener-Policy': 'same-origin',\n        'X-Robots-Tag': 'noindex, nofollow',\n        'Permissions-Policy': 'geolocation=(), microphone=(), camera=()'\n    };\n    return { ...(base as any), ...(extra || {}) };\n}\n\nexport interface Env extends DbEnv {\n    // MY_KV_NAMESPACE: KVNamespace;\n}\n\nconst limiter = new RateLimiter(30);\n\nexport default {\n    async fetch(\n        request: Request,\n        env: Env,\n        ctx: ExecutionContext\n    ): Promise<Response> {\n        const url = new URL(request.url);\n        const isCustomDomain = !/\\.workers\\.dev$/i.test(url.hostname);\n        const isHttps = url.protocol === 'https:';\n        const baseExtra: Record<string, string> = {};\n        if (isCustomDomain && isHttps) {\n            baseExtra['Strict-Transport-Security'] = 'max-age=15552000; includeSubDomains';\n        }\n        // Default Content Security Policy. For the HTML page, we override with a nonce-based CSP.\n        baseExtra['Content-Security-Policy'] = [\n            \"default-src 'self'\",\n            \"img-src 'self' data:\",\n            \"style-src 'self' 'unsafe-inline'\",\n            \"script-src 'self' 'unsafe-inline'\",\n            \"connect-src 'self'\",\n            \"base-uri 'none'\",\n            \"form-action 'self'\",\n            \"frame-ancestors 'none'\"\n        ].join('; ');\n\n        const sh = (extras?: Record<string, string>) => securityHeaders({ ...(baseExtra as any), ...(extras || {}) });\n\n        const clientIp = request.headers.get('CF-Connecting-IP') || 'unknown';\n        const userAgent = request.headers.get('User-Agent') || 'unknown';\n        const referer = request.headers.get('Referer') || null;\n        const cf = request.cf;\n\n        // Basic health check endpoint for observability\n        if (request.method === 'GET' && url.pathname === '/health') {\n            const body = JSON.stringify({ status: 'ok', time: new Date().toISOString() });\n            return new Response(body, {\n                status: 200,\n                headers: sh({\n                    'Content-Type': 'application/json; charset=UTF-8',\n                    'Cache-Control': 'no-store, no-cache, must-revalidate, max-age=0',\n                    'Pragma': 'no-cache',\n                    'Expires': '0'\n                })\n            });\n        }\n\n        // CORS preflight handling (restrict to same-origin by default)\n        if (request.method === 'OPTIONS') {\n            const origin = request.headers.get('Origin') || '';\n            const allowOrigin = origin && origin === url.origin ? origin : '';\n            if (!allowOrigin) {\n                return new Response(null, { status: 204, headers: sh() });\n            }\n            return new Response(null, {\n                status: 204,\n                headers: sh({\n                    'Access-Control-Allow-Origin': allowOrigin,\n                    'Access-Control-Allow-Methods': 'POST, GET, OPTIONS',\n                    'Access-Control-Allow-Headers': 'Content-Type',\n                    'Access-Control-Max-Age': '600'\n                })\n            });\n        }\n\n        if (request.method === \"POST\" && url.pathname === '/') {\n            const minimumTrustScore = 10;\n\n            if (cf && typeof cf.clientTrustScore === 'number' && cf.clientTrustScore < minimumTrustScore) {\n                console.warn(\n                    `Blocking POST request: Low trust score (${cf.clientTrustScore}). ` +\n                    `IP: ${clientIp}, Country: ${cf.country || 'N/A'}, ASN: ${cf.asn || 'N/A'}`\n                );\n                return new Response(JSON.stringify({ error: 'forbidden', reason: 'low_trust_score' }), {\n                    status: 403,\n                    headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' })\n                });\n            }\n\n            try {\n                const contentType = request.headers.get('Content-Type') || '';\n                if (!contentType.toLowerCase().startsWith('application/json')) {\n                    console.warn(`Bad POST Content-Type from ${clientIp}: ${contentType}`);\n                    return new Response(\n                        JSON.stringify({ error: 'bad_request', reason: 'expected_application_json' }),\n                        { status: 400, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                    );\n                }\n\n                // Enforce same-origin POST when Origin header is present (browsers)\n                const origin = request.headers.get('Origin');\n                if (origin && origin !== url.origin) {\n                    console.warn(`Cross-origin POST blocked. Origin=${origin}, Expect=${url.origin}, IP=${clientIp}`);\n                    return new Response(\n                        JSON.stringify({ error: 'forbidden', reason: 'cross_origin' }),\n                        { status: 403, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                    );\n                }\n\n                // Very small payload; reject abnormally large bodies early on Free plan\n                const cl = request.headers.get('Content-Length');\n                if (cl && Number(cl) > 2048) {\n                    return new Response(\n                        JSON.stringify({ error: 'payload_too_large' }),\n                        { status: 413, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                    );\n                }\n\n                interface IncomingCoreData { color: string; trace_id: string; source: string; }\n                const coreData: IncomingCoreData = await request.json();\n\n                const colorOk = typeof coreData?.color === 'string' && /^#[0-9a-fA-F]{6}$/.test(coreData.color);\n                const traceOk = typeof coreData?.trace_id === 'string' && coreData.trace_id.length > 0 && coreData.trace_id.length <= 36; // align DB limit\n                if (!coreData || !colorOk || !traceOk ||\n                    typeof coreData.source !== 'string' ||\n                    !['a', 'c', 'i'].includes(coreData.source)) {\n                    console.error(\"Received invalid core data structure, color format, or source from client:\", coreData);\n                    return new Response(\n                        JSON.stringify({ error: 'bad_request', reason: 'invalid_payload' }),\n                        { status: 400, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                    );\n                }\n\n                if (limiter.canProceed()) {\n                    // Sanitize header-derived fields to DB column sizes\n                    const userAgentSafe = (userAgent || 'unknown').slice(0, 1000);\n                    const refererSafe = referer ? referer.slice(0, 2000) : null;\n                    const fullDataToInsert: ColorRecordForAutoRest = {\n                        color: coreData.color,\n                        trace_id: coreData.trace_id,\n                        source: coreData.source,\n                        event_at: new Date().toISOString(), // \u663E\u5F0F\u53D1\u9001 event_at\n                        client_ip: clientIp,\n                        user_agent: userAgentSafe,\n                        referer: refererSafe,\n                        cf_country: (cf && typeof cf.country === 'string') ? cf.country : null,\n                        cf_colo: (cf && typeof cf.colo === 'string') ? cf.colo : null,\n                        cf_asn: (cf && typeof cf.asn === 'number') ? cf.asn : null,\n                        cf_http_protocol: (cf && typeof cf.httpProtocol === 'string') ? cf.httpProtocol : null,\n                        cf_tls_cipher: (cf && typeof cf.tlsCipher === 'string') ? cf.tlsCipher : null,\n                        cf_tls_version: (cf && typeof cf.tlsVersion === 'string') ? cf.tlsVersion : null,\n                        cf_threat_score: (cf && typeof cf.threatScore === 'number') ? cf.threatScore : null,\n                        cf_trust_score: (cf && typeof cf.clientTrustScore === 'number') ? cf.clientTrustScore : null,\n                        extra: null\n                    };\n\n                    ctx.waitUntil(\n                        (async () => {\n                            try {\n                                await insertColorRecord(fullDataToInsert, env);\n                            } catch (dbError: any) {\n                                console.error(`Error in waitUntil for insertColorRecord (trace: ${fullDataToInsert.trace_id}) from fetch:`, dbError.message, dbError.stack);\n                            }\n                        })()\n                    );\n                    return new Response(JSON.stringify({ status: 'ok' }), {\n                        status: 200,\n                        headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' })\n                    });\n\n                } else {\n                    console.log(`Rate limit exceeded for trace ${coreData.trace_id} from IP ${clientIp}`);\n                    return new Response(\n                        JSON.stringify({ error: 'too_many_requests' }),\n                        { status: 429, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                    );\n                }\n\n            } catch (e: any) {\n                console.error(\"Error processing POST request in fetch handler:\", e?.message, e?.stack, e);\n                return new Response(\n                    JSON.stringify({ error: 'bad_request', reason: 'invalid_json_or_internal' }),\n                    { status: 400, headers: sh({ 'Content-Type': 'application/json; charset=UTF-8' }) }\n                );\n            }\n        }\n\n        if (request.method === \"GET\" && url.pathname === '/') {\n            const traceId = generateTraceId();\n            const colorHex = generateRandomColorHex();\n            // Generate a CSP nonce for inline script\n            const nonceBytes = new Uint8Array(16);\n            crypto.getRandomValues(nonceBytes);\n            const nonce = btoa(String.fromCharCode(...nonceBytes))\n                .replace(/=+/g, '')\n                .replace(/\\+/g, '-')\n                .replace(/\\//g, '_');\n\n            const htmlContent = pageTemplate\n                .replaceAll('__COLOR_HEX__', colorHex)\n                .replaceAll('__COLOR_HEX_URL_ENCODED__', colorHex.replace('#', '%23'))\n                .replaceAll('__TRACE_ID__', traceId)\n                .replaceAll('__INITIAL_COLOR_HEX__', colorHex)\n                .replaceAll('__CSP_NONCE__', nonce);\n\n            const cspWithNonce = [\n                \"default-src 'self'\",\n                \"img-src 'self' data:\",\n                \"style-src 'self' 'unsafe-inline'\",\n                `script-src 'self' 'nonce-${nonce}'`,\n                \"connect-src 'self'\",\n                \"base-uri 'none'\",\n                \"form-action 'self'\",\n                \"frame-ancestors 'none'\"\n            ].join('; ');\n            return new Response(htmlContent, {\n                headers: sh({\n                    \"Content-Type\": \"text/html; charset=UTF-8\",\n                    \"Cache-Control\": \"no-store, no-cache, must-revalidate, max-age=0\",\n                    \"Pragma\": \"no-cache\",\n                    \"Expires\": \"0\",\n                    \"Content-Security-Policy\": cspWithNonce\n                })\n            });\n        }\n\n        // Basic robots.txt to avoid indexing demo pages\n        if (request.method === 'GET' && url.pathname === '/robots.txt') {\n            const txt = 'User-agent: *\\nDisallow: /\\n';\n            return new Response(txt, { headers: sh({ 'Content-Type': 'text/plain; charset=UTF-8', 'Cache-Control': 'no-store' }) });\n        }\n\n        return new Response(\"Not Found\", { status: 404, headers: sh({ 'Content-Type': 'text/plain; charset=UTF-8' }) });\n    },\n\n    async scheduled(\n        event: ScheduledEvent,\n        env: Env,\n        ctx: ExecutionContext\n    ): Promise<void> {\n        console.log(`[${new Date().toISOString()}] Cron Trigger (Simulated User Visit) Fired: ${event.cron}`);\n\n        const simulatedColor = generateRandomColorHex();\n        const simulatedTraceId = `cron-sim-${Date.now()}-${crypto.randomUUID().substring(0, 8)}`;\n\n        const simulatedUserData: ColorRecordForAutoRest = {\n            color: simulatedColor, // \u4F7F\u7528\u968F\u673A\u751F\u6210\u7684\u989C\u8272\n            trace_id: simulatedTraceId,\n            source: 's', // \u4FEE\u6539\u4E3A 's' \u4EE5\u7B26\u5408\u6570\u636E\u5E93 CHECK_COLOR_EVENTS_SRC \u7EA6\u675F\n            event_at: new Date().toISOString(), // \u663E\u5F0F\u53D1\u9001\u4E8B\u4EF6\u65F6\u95F4\n            client_ip: \"CRON_SIMULATED_IP\",\n            user_agent: \"WanderingRain-Cron-Simulator/1.0 (Scheduled Task)\",\n            referer: \"urn:cloudflare:worker:scheduled\",\n            cf_country: \"XX\",\n            cf_colo: \"SYSTEM\",\n            cf_asn: 0,\n            cf_http_protocol: \"SYSTEM\",\n            cf_tls_cipher: null,\n            cf_tls_version: null,\n            cf_threat_score: 0,\n            cf_trust_score: 99,\n            extra: null\n        };\n\n        console.log(`Simulated user visit data for AutoREST (cron): ${JSON.stringify(simulatedUserData)}`);\n\n        ctx.waitUntil(\n            (async () => {\n                try {\n                    await insertColorRecord(simulatedUserData, env);\n                    console.log(`Successfully logged simulated user visit (trace: ${simulatedTraceId}) via cron.`);\n                } catch (dbError: any) {\n                    console.error(`[CRON_SIM_ERROR] Simulated user visit task failed for trace ${simulatedUserData.trace_id}. Error:`, dbError.message, dbError.stack);\n                }\n            })()\n        );\n    }\n};\n"],
  "mappings": "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",
  "names": ["generateRandomColorHex", "h", "s", "l", "h1", "s1", "l1", "r", "g", "b", "hue2rgb", "__name", "p", "q", "t", "toHex", "x", "generateTraceId", "timestamp", "randomPart", "__name", "RateLimiter", "__name", "limit", "now", "insertColorRecord", "colorData", "env", "baseUrl", "schemaPath", "tableAliasPath", "apiUrl", "requestBody", "credentials", "basicAuthHeader", "maxAttempts", "attempt", "response", "lastError", "baseTimeoutMs", "controller", "timeout", "fetchError", "delayMs", "status", "statusText", "errorBodyText", "e", "__name", "pageTemplate", "template_default", "securityHeaders", "extra", "__name", "limiter", "RateLimiter", "index_default", "request", "env", "ctx", "url", "isCustomDomain", "isHttps", "baseExtra", "sh", "extras", "clientIp", "userAgent", "referer", "cf", "body", "origin", "allowOrigin", "contentType", "cl", "coreData", "colorOk", "traceOk", "userAgentSafe", "refererSafe", "fullDataToInsert", "insertColorRecord", "dbError", "e", "traceId", "generateTraceId", "colorHex", "generateRandomColorHex", "nonceBytes", "nonce", "htmlContent", "template_default", "cspWithNonce", "txt", "event", "simulatedColor", "simulatedTraceId", "simulatedUserData"]
}
