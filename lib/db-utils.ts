// lib/db-utils.ts

import { getCurrentTableName } from './time-utils';

const ORACLE_REST_API_BASE = 'https://你的_oracle_rest_api_base_url/ords/admin/'; // 注意替换

export async function ensureTableExists(tableName: string): Promise<void> {
    // 这里只是模拟，通常需要通过查询Oracle的Metadata API确认是否存在
    // 简化逻辑：假设每次都建表+注册（Oracle已有建表存在检测）

    const createTableSQL = `
    BEGIN
      EXECUTE IMMEDIATE '
        CREATE TABLE ${tableName} (
          id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          color VARCHAR2(50) NOT NULL,
          event_at TIMESTAMP(6) DEFAULT SYSTIMESTAMP,
          trace_id VARCHAR2(100),
          source CHAR(1),
          extra CLOB
        )
      ';
    EXCEPTION
      WHEN OTHERS THEN
        IF SQLCODE != -955 THEN -- 表已存在错误
          RAISE;
        END IF;
    END;
  `;

    const registerRestSQL = `
    BEGIN
      ORDS.ENABLE_OBJECT(
        p_schema => 'ADMIN',
        p_object => '${tableName}',
        p_object_type => 'TABLE',
        p_url_mapping_type => 'TABLE',
        p_url_mapping_pattern => '${tableName}',
        p_auto_rest_auth => FALSE
      );
    END;
  `;

    // 发送建表请求
    await fetch(`${ORACLE_REST_API_BASE}sql`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/sql' },
        body: createTableSQL.trim()
    });

    // 发送注册REST请求
    await fetch(`${ORACLE_REST_API_BASE}sql`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/sql' },
        body: registerRestSQL.trim()
    });
}

export async function insertColorRecord(color: string, source: string | null, traceId: string): Promise<void> {
    const tableName = getCurrentTableName();

    const payload: Record<string, any> = {
        color,
        trace_id: traceId
    };

    if (source) {
        payload.source = source;
    }

    await fetch(`${ORACLE_REST_API_BASE}${tableName}/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(payload)
    });
}
