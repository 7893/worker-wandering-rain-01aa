// lib/db-utils.ts

// Define an interface for the environment variables we expect
// Make sure these are bound in your wrangler.toml and configured as secrets
interface Env {
    ORDS_BASE_URL: string;
    ORDS_ADMIN_SCHEMA: string;
    // Add other bindings/secrets if needed
}

async function tableExists(tableName: string, env: Env): Promise<boolean> {
    // Use environment variables for configuration
    const resp = await fetch(`${env.ORDS_BASE_URL}/metadata-catalog/${env.ORDS_ADMIN_SCHEMA}/tables/${tableName.toUpperCase()}`, { method: 'GET' });
    // Check more specific status codes if needed, ORDS might return 404 for non-existent tables
    return resp.ok;
}

async function createTable(tableName: string, env: Env): Promise<void> {
    // Oracle identifiers are often case-insensitive but stored uppercase by default.
    // Using uppercase explicitly can prevent potential issues.
    const upperCaseTableName = tableName.toUpperCase();
    const sql = `
    CREATE TABLE ${env.ORDS_ADMIN_SCHEMA}.${upperCaseTableName} (
      id NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
      color VARCHAR2(50),
      event_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
      trace_id VARCHAR2(100),
      source CHAR(1),
      extra CLOB
    )
  `;
    const resp = await fetch(`${env.ORDS_BASE_URL}/sql`, {
        method: 'POST',
        headers: {
            "Content-Type": "application/sql",
            // Add Authorization header if ORDS requires authentication
        },
        body: sql
    });

    if (!resp.ok) {
        const errorText = await resp.text();
        console.error(`Failed to create table ${upperCaseTableName}: ${resp.status} ${resp.statusText}`, errorText);
        throw new Error(`Failed to create table ${upperCaseTableName}: ${errorText}`);
    }
    console.log(`Table ${upperCaseTableName} created successfully.`);
}

async function registerRestApi(tableName: string, env: Env): Promise<void> {
    // Use uppercase table name consistent with creation
    const upperCaseTableName = tableName.toUpperCase();
    const payload = {
        module_name: "default", // Consider making this configurable via env vars too
        base_path: "/",          // Consider making this configurable via env vars too
        privileges: "unauthenticated", // WARNING: This allows unauthenticated access. Review security needs.
        objects: [
            {
                object_name: upperCaseTableName, // Use the actual table name
                object_alias: tableName.toLowerCase(), // Use a consistent alias (e.g., lowercase) for the API endpoint URL
                http_methods_allowed: "GET,POST"
            }
        ]
    };
    // The endpoint for managing modules/objects might differ slightly based on ORDS version or config
    const resp = await fetch(`${env.ORDS_BASE_URL}/metadata-catalog/${env.ORDS_ADMIN_SCHEMA}/modules/default`, {
        method: 'PUT', // PUT is generally used for create/replace operations
        headers: {
            "Content-Type": "application/json",
            // Add Authorization header if ORDS requires authentication
        },
        body: JSON.stringify(payload)
    });

    if (!resp.ok) {
        const errorText = await resp.text();
        console.error(`Failed to register REST API for table ${upperCaseTableName}: ${resp.status} ${resp.statusText}`, errorText);
        throw new Error(`Failed to register REST API for table ${upperCaseTableName}: ${errorText}`);
    }
    console.log(`REST API for table ${upperCaseTableName} (alias: ${tableName.toLowerCase()}) registered/updated successfully.`);
}

// Cache for tables known to exist in this worker instance to reduce checks
const knownTables = new Set<string>();

export async function ensureMonthlyTableAndRestApi(tableName: string, env: Env): Promise<void> {
    // Use uppercase for existence check and creation logic consistency
    const upperCaseTableName = tableName.toUpperCase();

    // Check cache first
    if (knownTables.has(upperCaseTableName)) {
        return;
    }

    if (await tableExists(upperCaseTableName, env)) {
        knownTables.add(upperCaseTableName); // Add to cache if exists
        return;
    }

    console.log(`Table ${upperCaseTableName} does not exist. Attempting creation...`);
    try {
        await createTable(upperCaseTableName, env);
        knownTables.add(upperCaseTableName); // Add to cache after successful creation

        // Attempt to register REST API after successful table creation
        console.log(`Attempting to register REST API for ${upperCaseTableName}...`);
        await registerRestApi(tableName, env); // Pass original tableName for lowercase alias

    } catch (error) {
        console.error(`Error ensuring table and REST API for ${upperCaseTableName}:`, error);
        // Decide if error should be re-thrown or handled (e.g., maybe table exists now due to race condition)
        // For simplicity, re-throwing. Consider more robust handling for production.
        throw error;
    }
}

export async function insertColorRecord(tableName: string, color: string, traceId: string, source: string, env: Env): Promise<void> {
    // Use the lowercase alias defined during REST API registration for the endpoint URL
    const url = `${env.ORDS_BASE_URL}/${tableName.toLowerCase()}/`;
    const resp = await fetch(url, {
        method: 'POST',
        headers: {
            "Content-Type": "application/json",
            // Add Authorization header if ORDS requires authentication
        },
        body: JSON.stringify({
            color,
            trace_id: traceId,
            source,
            extra: null // Assuming extra is always null for now
        })
    });

    if (!resp.ok) {
        const errorText = await resp.text();
        console.error(`Failed to insert record into ${tableName}: ${resp.status} ${resp.statusText}`, errorText);
        // Consider specific error handling (e.g., retries for transient errors)
        throw new Error(`Failed to insert record into ${tableName}: ${errorText}`);
    }
    // Optional: Log successful insertion if needed
    // console.log(`Record inserted into ${tableName} successfully. Trace ID: ${traceId}`);
}